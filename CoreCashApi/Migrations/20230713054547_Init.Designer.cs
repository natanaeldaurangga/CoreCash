// <auto-generated />
using System;
using CoreCashApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreCashApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230713054547_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoreCashApi.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccountCode")
                        .HasColumnType("int")
                        .HasColumnName("account_code");

                    b.Property<int>("AccountGroup")
                        .HasColumnType("int")
                        .HasColumnName("account_group");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48f295a7-fd6d-42b4-813f-456d935d03cd"),
                            AccountCode = 11001,
                            AccountGroup = 11,
                            AccountName = "CASH",
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9933),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9934)
                        },
                        new
                        {
                            Id = new Guid("a269c71f-324e-467e-b97e-3f85891dc402"),
                            AccountCode = 11005,
                            AccountGroup = 11,
                            AccountName = "RECEIVABLE",
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9936),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9936)
                        },
                        new
                        {
                            Id = new Guid("4c1c39f9-1418-4419-98c7-79377a12f93b"),
                            AccountCode = 21001,
                            AccountGroup = 21,
                            AccountName = "PAYABLE",
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9937),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9938)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Ledger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<int>("Entry")
                        .HasColumnType("int")
                        .HasColumnName("entry");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RecordId", "AccountId");

                    b.ToTable("ledgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DebtorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("debtor_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DebtorId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.HasIndex("RecordId", "DebtorId");

                    b.ToTable("payables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.PayableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("PayableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayableId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.HasIndex("RecordId", "PayableId");

                    b.ToTable("payable_ledger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreditorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("creditor_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.HasIndex("RecordId", "CreditorId");

                    b.ToTable("receivables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.ReceivableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ReceivableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableId")
                        .IsUnique();

                    b.HasIndex("RecordId", "ReceivableId");

                    b.ToTable("receivable_ledger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("RecordGroup")
                        .HasColumnType("int")
                        .HasColumnName("record_group");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("recorded_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("records");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4385ecc9-32af-4b73-ab43-a40bae8676de"),
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(8983),
                            Name = "ROLE_ADMIN",
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(8986)
                        },
                        new
                        {
                            Id = new Guid("e85e271a-d8c6-4fc2-84a7-7c5e03e9be8e"),
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9016),
                            Name = "ROLE_USER",
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9016)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reset_password_token");

                    b.Property<DateTime>("ResetTokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("reset_token_expires");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("token_expires");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("verification_token");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("verified_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bbfc943-9c22-4b8d-a7f0-9acbde1c47e9"),
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9873),
                            Email = "admin1@example.com",
                            FullName = "Admin Satu",
                            PasswordHash = new byte[] { 157, 188, 161, 154, 103, 178, 22, 19, 172, 62, 44, 244, 183, 20, 96, 99, 191, 21, 121, 121, 91, 47, 61, 119, 91, 228, 110, 233, 68, 33, 232, 85 },
                            PasswordSalt = new byte[] { 21, 138, 43, 111, 250, 170, 62, 177, 163, 214, 89, 137, 170, 125, 11, 253, 57, 71, 197, 106, 115, 77, 80, 200, 22, 92, 58, 150, 2, 37, 25, 250, 58, 205, 200, 219, 21, 110, 106, 126, 166, 152, 41, 22, 89, 11, 211, 85, 74, 25, 99, 77, 112, 202, 86, 250, 123, 211, 161, 94, 134, 238, 254, 238 },
                            ResetTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("4385ecc9-32af-4b73-ab43-a40bae8676de"),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9873),
                            VerifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cde13492-62dd-420d-a97b-559d7fe354a3"),
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9885),
                            Email = "admin2@example.com",
                            FullName = "Admin Dua",
                            PasswordHash = new byte[] { 157, 188, 161, 154, 103, 178, 22, 19, 172, 62, 44, 244, 183, 20, 96, 99, 191, 21, 121, 121, 91, 47, 61, 119, 91, 228, 110, 233, 68, 33, 232, 85 },
                            PasswordSalt = new byte[] { 21, 138, 43, 111, 250, 170, 62, 177, 163, 214, 89, 137, 170, 125, 11, 253, 57, 71, 197, 106, 115, 77, 80, 200, 22, 92, 58, 150, 2, 37, 25, 250, 58, 205, 200, 219, 21, 110, 106, 126, 166, 152, 41, 22, 89, 11, 211, 85, 74, 25, 99, 77, 112, 202, 86, 250, 123, 211, 161, 94, 134, 238, 254, 238 },
                            ResetTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("4385ecc9-32af-4b73-ab43-a40bae8676de"),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9885),
                            VerifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("67620865-baca-4a53-ac33-e5796c6c4986"),
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9888),
                            Email = "user1@example.com",
                            FullName = "User Satu",
                            PasswordHash = new byte[] { 157, 188, 161, 154, 103, 178, 22, 19, 172, 62, 44, 244, 183, 20, 96, 99, 191, 21, 121, 121, 91, 47, 61, 119, 91, 228, 110, 233, 68, 33, 232, 85 },
                            PasswordSalt = new byte[] { 21, 138, 43, 111, 250, 170, 62, 177, 163, 214, 89, 137, 170, 125, 11, 253, 57, 71, 197, 106, 115, 77, 80, 200, 22, 92, 58, 150, 2, 37, 25, 250, 58, 205, 200, 219, 21, 110, 106, 126, 166, 152, 41, 22, 89, 11, 211, 85, 74, 25, 99, 77, 112, 202, 86, 250, 123, 211, 161, 94, 134, 238, 254, 238 },
                            ResetTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("e85e271a-d8c6-4fc2-84a7-7c5e03e9be8e"),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9888),
                            VerifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53255e0f-be7b-4b17-9e9f-3d433ffec4f0"),
                            CreatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9890),
                            Email = "user2@example.com",
                            FullName = "User Dua",
                            PasswordHash = new byte[] { 157, 188, 161, 154, 103, 178, 22, 19, 172, 62, 44, 244, 183, 20, 96, 99, 191, 21, 121, 121, 91, 47, 61, 119, 91, 228, 110, 233, 68, 33, 232, 85 },
                            PasswordSalt = new byte[] { 21, 138, 43, 111, 250, 170, 62, 177, 163, 214, 89, 137, 170, 125, 11, 253, 57, 71, 197, 106, 115, 77, 80, 200, 22, 92, 58, 150, 2, 37, 25, 250, 58, 205, 200, 219, 21, 110, 106, 126, 166, 152, 41, 22, 89, 11, 211, 85, 74, 25, 99, 77, 112, 202, 86, 250, 123, 211, 161, 94, 134, 238, 254, 238 },
                            ResetTokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("e85e271a-d8c6-4fc2-84a7-7c5e03e9be8e"),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2023, 7, 13, 5, 45, 46, 668, DateTimeKind.Utc).AddTicks(9890),
                            VerifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.Ledger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Account", "Account")
                        .WithMany("Ledgers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithMany("Ledgers")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Contact", "Debtor")
                        .WithMany("Payables")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("Payable")
                        .HasForeignKey("CoreCashApi.Entities.Payable", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debtor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.PayableLedger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Payable", "Payable")
                        .WithMany("PayableLedgers")
                        .HasForeignKey("PayableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("PayableLedger")
                        .HasForeignKey("CoreCashApi.Entities.PayableLedger", "RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payable");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Contact", "Creditor")
                        .WithMany("Receivables")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("Receivable")
                        .HasForeignKey("CoreCashApi.Entities.Receivable", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creditor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.ReceivableLedger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Receivable", "Receivable")
                        .WithMany("ReceivableLedgers")
                        .HasForeignKey("ReceivableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("ReceivableLedger")
                        .HasForeignKey("CoreCashApi.Entities.ReceivableLedger", "ReceivableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receivable");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.HasOne("CoreCashApi.Entities.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Account", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Contact", b =>
                {
                    b.Navigation("Payables");

                    b.Navigation("Receivables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.Navigation("PayableLedgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.Navigation("ReceivableLedgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.Navigation("Ledgers");

                    b.Navigation("Payable");

                    b.Navigation("PayableLedger");

                    b.Navigation("Receivable");

                    b.Navigation("ReceivableLedger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
