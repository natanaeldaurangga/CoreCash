// <auto-generated />
using System;
using CoreCashApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreCashApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230710161601_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoreCashApi.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("account_code");

                    b.Property<int>("AccountGroup")
                        .HasColumnType("int")
                        .HasColumnName("account_group");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6501441-8a62-44fd-8c12-62c4bb151f62"),
                            AccountCode = "11001",
                            AccountGroup = 0,
                            AccountName = "CASH",
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1555),
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1556)
                        },
                        new
                        {
                            Id = new Guid("a45f0d39-7596-45e6-9abd-4f3d1beb00f7"),
                            AccountCode = "11005",
                            AccountGroup = 0,
                            AccountName = "RECEIVABLE",
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1559),
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1559)
                        },
                        new
                        {
                            Id = new Guid("19cd0b3a-ddfb-4e35-b6e3-a731eca8b389"),
                            AccountCode = "21001",
                            AccountGroup = 2,
                            AccountName = "PAYABLE",
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1561),
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1562)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("CoreCashApi.Entities.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<int>("Entry")
                        .HasColumnType("int")
                        .HasColumnName("entry");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RecordId");

                    b.ToTable("journal_entries");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DebtorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("debtor_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DebtorId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("payables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.PayableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("PayableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayableId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("payable_ledger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreditorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("creditor_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("receivables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.ReceivableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ReceivableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableId")
                        .IsUnique();

                    b.ToTable("receivable_ledger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("RecordTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_type_id");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("recorded_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecordTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("records");
                });

            modelBuilder.Entity("CoreCashApi.Entities.RecordType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("record_types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cff92c1e-0338-4825-975c-841d46e6911b"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1506),
                            Name = "CASH_IN",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1506)
                        },
                        new
                        {
                            Id = new Guid("1cb17dc5-4929-4d3e-bbd0-623a17ad14c2"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1510),
                            Name = "CASH_OUT",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1511)
                        },
                        new
                        {
                            Id = new Guid("b5a71d56-8399-4aec-8f3f-08cb21a0f9dd"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1513),
                            Name = "NEW_RECEIVABLE",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1513)
                        },
                        new
                        {
                            Id = new Guid("10b37a47-ea34-4b52-ad6a-03d50b01beb8"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1529),
                            Name = "NEW_PAYABLE",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1530)
                        },
                        new
                        {
                            Id = new Guid("c7fdcfb6-8b5b-4698-b41f-a7fa0dd29d03"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1531),
                            Name = "RECEIVABLE_PAYMENT",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1532)
                        },
                        new
                        {
                            Id = new Guid("8df4f02c-bdf8-4c77-b5f7-fb920249d63a"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1533),
                            Name = "PAYABLE_PAYMENT",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1534)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0134017-b802-497b-a40e-4d2a575841eb"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1248),
                            Name = "ROLE_ADMIN",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1252)
                        },
                        new
                        {
                            Id = new Guid("7682d35e-8acb-47ca-a7a1-b10ff8b4d419"),
                            CreatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1296),
                            Name = "ROLE_USER",
                            UpdatedAt = new DateTime(2023, 7, 10, 16, 16, 1, 120, DateTimeKind.Utc).AddTicks(1296)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reset_password_token");

                    b.Property<DateTime>("ResetTokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("reset_token_expires");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("token_expires");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("verification_token");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("verified_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CoreCashApi.Entities.JournalEntry", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Account", "Account")
                        .WithMany("JournalEntries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithMany("JournalEntries")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Contact", "Debtor")
                        .WithMany("Payables")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("Payable")
                        .HasForeignKey("CoreCashApi.Entities.Payable", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debtor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.PayableLedger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Payable", "Payable")
                        .WithMany("PayableLedgers")
                        .HasForeignKey("PayableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("PayableLedger")
                        .HasForeignKey("CoreCashApi.Entities.PayableLedger", "RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payable");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Contact", "Creditor")
                        .WithMany("Receivables")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("Receivable")
                        .HasForeignKey("CoreCashApi.Entities.Receivable", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creditor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.ReceivableLedger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Receivable", "Receivable")
                        .WithMany("ReceivableLedgers")
                        .HasForeignKey("ReceivableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("ReceivableLedger")
                        .HasForeignKey("CoreCashApi.Entities.ReceivableLedger", "ReceivableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receivable");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.HasOne("CoreCashApi.Entities.RecordType", "RecordType")
                        .WithMany("Records")
                        .HasForeignKey("RecordTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecordType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Account", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Contact", b =>
                {
                    b.Navigation("Payables");

                    b.Navigation("Receivables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.Navigation("PayableLedgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.Navigation("ReceivableLedgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.Navigation("JournalEntries");

                    b.Navigation("Payable");

                    b.Navigation("PayableLedger");

                    b.Navigation("Receivable");

                    b.Navigation("ReceivableLedger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.RecordType", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
