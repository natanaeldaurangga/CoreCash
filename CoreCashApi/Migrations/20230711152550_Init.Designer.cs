// <auto-generated />
using System;
using CoreCashApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreCashApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230711152550_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoreCashApi.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccountCode")
                        .HasColumnType("int")
                        .HasColumnName("account_code");

                    b.Property<int>("AccountGroup")
                        .HasColumnType("int")
                        .HasColumnName("account_group");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5b4ff80-bcc6-4aaa-b428-4fa26d7f9978"),
                            AccountCode = 11001,
                            AccountGroup = 11,
                            AccountName = "CASH",
                            CreatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4985),
                            UpdatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4985)
                        },
                        new
                        {
                            Id = new Guid("8d348235-6143-41c6-a940-e1ca934b5711"),
                            AccountCode = 11005,
                            AccountGroup = 11,
                            AccountName = "RECEIVABLE",
                            CreatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4990),
                            UpdatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4990)
                        },
                        new
                        {
                            Id = new Guid("94b4ed99-229a-4c88-9ea7-59052f4f9390"),
                            AccountCode = 21001,
                            AccountGroup = 21,
                            AccountName = "PAYABLE",
                            CreatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4992),
                            UpdatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4993)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Ledger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<int>("Entry")
                        .HasColumnType("int")
                        .HasColumnName("entry");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RecordId");

                    b.ToTable("ledgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DebtorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("debtor_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DebtorId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("payables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.PayableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("PayableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PayableId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("payable_ledger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreditorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("creditor_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("receivables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.ReceivableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ReceivableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableId")
                        .IsUnique();

                    b.ToTable("receivable_ledger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("RecordGroup")
                        .HasColumnType("int")
                        .HasColumnName("record_group");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("recorded_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("records");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d05d924-e7c0-4fb2-b088-45e873ecd62d"),
                            CreatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4741),
                            Name = "ROLE_ADMIN",
                            UpdatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4744)
                        },
                        new
                        {
                            Id = new Guid("d8f0631a-8b90-41de-8f86-dc94adb8e89c"),
                            CreatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4780),
                            Name = "ROLE_USER",
                            UpdatedAt = new DateTime(2023, 7, 11, 15, 25, 50, 643, DateTimeKind.Utc).AddTicks(4781)
                        });
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reset_password_token");

                    b.Property<DateTime>("ResetTokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("reset_token_expires");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("token_expires");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("verification_token");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("verified_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Ledger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Account", "Account")
                        .WithMany("Ledgers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithMany("Ledgers")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Contact", "Debtor")
                        .WithMany("Payables")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("Payable")
                        .HasForeignKey("CoreCashApi.Entities.Payable", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debtor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.PayableLedger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Payable", "Payable")
                        .WithMany("PayableLedgers")
                        .HasForeignKey("PayableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("PayableLedger")
                        .HasForeignKey("CoreCashApi.Entities.PayableLedger", "RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payable");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Contact", "Creditor")
                        .WithMany("Receivables")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("Receivable")
                        .HasForeignKey("CoreCashApi.Entities.Receivable", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creditor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.ReceivableLedger", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Receivable", "Receivable")
                        .WithMany("ReceivableLedgers")
                        .HasForeignKey("ReceivableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCashApi.Entities.Record", "Record")
                        .WithOne("ReceivableLedger")
                        .HasForeignKey("CoreCashApi.Entities.ReceivableLedger", "ReceivableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receivable");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.HasOne("CoreCashApi.Entities.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.HasOne("CoreCashApi.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Account", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Contact", b =>
                {
                    b.Navigation("Payables");

                    b.Navigation("Receivables");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Payable", b =>
                {
                    b.Navigation("PayableLedgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Receivable", b =>
                {
                    b.Navigation("ReceivableLedgers");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Record", b =>
                {
                    b.Navigation("Ledgers");

                    b.Navigation("Payable");

                    b.Navigation("PayableLedger");

                    b.Navigation("Receivable");

                    b.Navigation("ReceivableLedger");
                });

            modelBuilder.Entity("CoreCashApi.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoreCashApi.Entities.User", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
